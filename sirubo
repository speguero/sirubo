#!/bin/sh -ue

#                            .__            ___.           
#                       _____|__|______ __ _\_ |__   ____  
#                      /  ___/  \_  __ \  |  \ __ \ /  _ \ 
#                      \___ \|  ||  | \/  |  / \_\ (  <_> )
#                     /____  >__||__|  |____/|___  /\____/ 
#                          \/                    \/        
#                                    v0.4
# 
#            Blocks outbound tech conglomerate (AS) network traffic.
#
#
#  MIT License
#  Copyright (c) 2020-2023 Steven Peguero
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

umask u=rw,go=

fpath_conf=
fpath_ruleset=
fname_service=
list_asn=
list_prefixes_ipv4=
list_prefixes_ipv6=
fqdn_whois="whois.radb.net"
program="sirubo"
os="$(uname -s | tr A-Z a-z)"

case "${os}" in
	openbsd)
		fpath_conf="/etc/${program}.conf"
		fpath_ruleset="/etc/pf.${program}.conf"
		;;
	linux)
		fpath_conf="/usr/local/etc/${program}.conf"
		fpath_ruleset="/usr/local/etc/${program}.ruleset"
		fname_service="${program}.service"
		;;
esac

list_asn="$(grep -Eo "^AS[^ ]+" "${fpath_conf}")"

cmd_create()
{
	#  create firewall ruleset file.

	#  create pf anchor:

	case "${os}" in
		openbsd)
			if ! grep -Eq "^anchor ${program}$" "/etc/pf.conf"
			then
				printf "anchor %s" "${program}" >> "/etc/pf.conf"
			fi
			;;
	esac

	#  create ruleset:

	test -f "${fpath_ruleset}.tmp" && rm -f "${fpath_ruleset}.tmp"
	touch "${fpath_ruleset}.tmp"

	case "${os}" in
		linux)
			{
				printf '#!/usr/sbin/nft -f\n\n'
				printf 'add table inet %s\n' "${program}"
				printf 'flush table inet %s\n' "${program}"
				printf 'add chain inet %s %s { type filter hook output priority 0 ; policy accept; }\n' "${program}" "${program}"
			} > "${fpath_ruleset}.tmp"
			;;
	esac

	#  perform whois query of asn(s) for prefixes:

#	wait_net_conn
	confirm_asn

	list_prefixes_ipv4="$(print_prefixes_ipv4)"
	list_prefixes_ipv6="$(print_prefixes_ipv6)"

	if [ -z "${list_prefixes_ipv4}" ] && [ -z "${list_prefixes_ipv6}" ]
	then
		>&2 printf "> error: asn queries did not return any prefix results.\n"
		exit 2
	fi

	#  add asn prefix reject rules:

	if [ -n "${list_prefixes_ipv4}" ]
	then
		printf "%s\n" "${list_prefixes_ipv4}" | while IFS= read -r prefix
		do
			case "${os}" in
				openbsd)
					printf "block return on any inet from any to %s\n" "${prefix}" >> "${fpath_ruleset}.tmp"
					;;
				linux)
					printf "add rule inet %s %s ip daddr %s reject\n" "${program}" "${program}" "${prefix}" >> "${fpath_ruleset}.tmp"
					;;
			esac
		done
	fi

	if [ -n "${list_prefixes_ipv6}" ]
	then
		printf "%s\n" "${list_prefixes_ipv6}" | while IFS= read -r prefix
		do
			case "${os}" in
				openbsd)
					printf "block return on any inet6 from any to %s\n" "${prefix}" >> "${fpath_ruleset}.tmp"
					;;
				linux)
					printf "add rule inet %s %s ip6 daddr %s reject\n" "${program}" "${program}" "${prefix}" >> "${fpath_ruleset}.tmp"
					;;
			esac
		done
	fi

	#  create ruleset persistency service:

	case "${os}" in
		openbsd)
			print_openbsd_service_file > "/etc/rc.d/${program}"
			chmod ugo=rx "/etc/rc.d/${program}"
			rcctl enable "${program}"
			;;
		linux)
			print_linux_systemd_service_file > "/etc/systemd/system/${fname_service}"
			systemctl -q daemon-reload
			systemctl -q reenable "${fname_service}"
			;;
	esac

	#  load ruleset:

	if [ -f "${fpath_ruleset}" ]
	then
		mv -f "${fpath_ruleset}" "${fpath_ruleset}.backup"
	fi

	mv -f "${fpath_ruleset}.tmp" "${fpath_ruleset}"

	case "${os}" in
		openbsd)
			pfctl -a "${program}" -f "${fpath_ruleset}"
			;;
		linux)
			nft -f "${fpath_ruleset}"
			;;
	esac
}

cmd_show()
{
	if [ -f "${fpath_ruleset}" ]
	then
		less "${fpath_ruleset}"
		exit $?
	else
		>&2 printf "> error: firewall ruleset not found.\n"
		exit 2
	fi
}

cmd_resume()
{
	case "${os}" in
		openbsd)
			rcctl enable "${program}"
			pfctl -a "${program}" -f "${fpath_ruleset}"
			;;
		linux)
			systemctl -q enable "${fname_service}"
			nft -f "${fpath_ruleset}"
			;;
	esac
}

cmd_halt()
{
	case "${os}" in
		openbsd)
			rcctl disable "${program}"
			pfctl -a "${program}" -F rules 2> /dev/null
			;;
		linux)
			systemctl -q disable "${fname_service}"
			nft delete table inet "${program}" 2> /dev/null
			;;
	esac
}

confirm_asn()
{
	#  print configured asn list featuring ipv4 and/or ipv6 prefixes.
	
	printf "\n> retrieving asn prefixes from:\n\n"
	printf "%s\n" "${list_asn}" | while IFS= read -r asn
	do
		printf "  %s\n" "${asn}"
	done
	printf "\n"

	printf "%s\n" "${list_asn}" | while IFS= read -r asn
	do
		if ! whois -h "${fqdn_whois}" -- -i origin "${asn}" | grep -Eq '^route\:'
		then
			>&2 printf "> warn: asn \"%s\" did not return ipv4 prefix results.\n" "${asn}"
		fi

		if ! whois -h "${fqdn_whois}" -- -i origin "${asn}" | grep -Eq '^route6\:'
		then
			>&2 printf "> warn: asn \"%s\" did not return ipv6 prefix results.\n" "${asn}"
		fi
	done
}

confirm_prerequisites()
{
	#  ensure program prerequisites exist.

	if ! [ -f "${fpath_conf}" ]
	then
		printf "  info: creating configuration file at \"%s\". specify at least one asn before continuing.\n" "${fpath_conf}"
		touch "${fpath_conf}" && \
			chown 0:0 "${fpath_conf}" && \
			chmod 600 "${fpath_conf}"
		return 1
	fi

	if ! grep -Eqo "^AS[^ ]+" "${fpath_conf}"
	then
		>&2 printf "> error: configuration file \"%s\" does not contain at least one asn.\n" "${fpath_conf}"
		return 1
	fi

	case "${os}" in
		openbsd)
			if ! command v pfctl > /dev/null 2>&1
			then
				>&2 printf "> error: \"pfctl\" is a prerequisite and was not found.\n"
				return 1
			fi

			if ! command -v whois > /dev/null 2>&1
			then
				>&2 printf "> error: \"whois\" is a prerequisite and was not found.\n"
				return 1
			fi
			;;
		linux)
			if ! pgrep -x systemd | head -1 | grep -q 1
			then
				>&2 printf "> error: \"systemd\" is a prerequisite and was not found.\n"
				return 1
			fi

			if ! command -v nft > /dev/null 2>&1
			then
				>&2 printf "> error: \"nft\" is a prerequisite and was not found.\n"
				return 1
			fi

			if ! command -v whois > /dev/null 2>&1
			then
				>&2 printf "> error: \"whois\" is a prerequisite and was not found.\n"
				return 1
			fi
			;;
	esac

	return 0
}

confirm_root()
{
	#  confirm program running under root.

	if [ "$(id -u)" != 0 ]
	then
		>&2 printf "> error: not running as root.\n"
		return 1
	else
		return 0
	fi
}

print_prefixes_ipv4()
{
	#  return list of ipv4 prefixes of specified asn.

	printf "%s\n" "${list_asn}" | while IFS= read -r asn
	do
		whois -h "${fqdn_whois}" -- -i origin "${asn}" | awk '/route:/ {print $2}'
	done
}

print_prefixes_ipv6()
{
	#  return list of ipv6 prefixes of specified asn.

	printf "%s\n" "${list_asn}" | while IFS= read -r asn
	do
		whois -h "${fqdn_whois}" -- -i origin "${asn}" | awk '/route6:/ {print $2}'
	done
}

print_linux_systemd_service_file()
{
	cat <<EOF
[Unit]
Description=ASN prefix outbound traffic blocker
After=network-online.target

[Service]
Type=oneshot
ExecStartPre=/usr/sbin/nft -f "${fpath_ruleset}"
ExecStart=/usr/local/bin/${program} create

[Install]
WantedBy=multi-user.target
EOF
}

print_openbsd_service_file()
{
	cat <<EOF
#!/bin/ksh

daemon="$(dirname "$(readlink -f "$0")")/${program}"

. /etc/rc.d/rc.subr

rc_pre() {
	\${rcexec} "(pfctl -a "${program}" -f "${fpath_ruleset}" &)"
}

rc_start() {
	\${rcexec} "(\${daemon} create &)"
}

rc_cmd \$1
EOF
}

usage()
{
	cat <<EOF
usage: ${program} [c|create] [h|halt|stop] [r|resume] [s|show]

  c, create
     create and start ruleset enforcement and persistence.

  h, halt, stop
     stop ruleset enforcement and persistence.

  r, resume
     resume ruleset enforcement and persistence.

  s, show
     show ruleset.
EOF

	exit 1
}

wait_net_conn()
{
	#  pause process until tcp port 43 of whois host is open. used to
	#  account for system reboots and initial network connectivity delays.

	until nc -w 1 "${fqdn_whois}" 43 > /dev/null 2>&1
	do
		sleep 1
	done
}

if ! confirm_prerequisites "${fpath_conf}"
then
	exit 2
fi

case "$@" in
	c|create)
		confirm_root || exit 2
		cmd_create
		;;
	s|show)
		confirm_root || exit 2
		cmd_show
		;;
	r|resume)
		confirm_root || exit 2
		cmd_resume
		;;
	h|halt|stop)
		confirm_root || exit 2
		cmd_halt
		;;
	h|help|*)
		usage
		;;
esac
